import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { jwtVerify } from 'jose';
import { verificationCodes } from '@/lib/verification-codes';

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { message: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let decoded;
    try {
      const secret = new TextEncoder().encode(process.env.JWT_SECRET || 'your-secret-key');
      const { payload } = await jwtVerify(token, secret);
      decoded = payload;
    } catch (error) {
      return NextResponse.json(
        { message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
    }

    if (decoded.stage !== 'pending_verification') {
      return NextResponse.json(
        { message: '–ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const [botTokenSetting, chatIdSetting] = await Promise.all([
      prisma.setting.findUnique({
        where: { key: 'TELEGRAM_BOT_TOKEN' },
      }),
      prisma.setting.findUnique({
        where: { key: 'TELEGRAM_CHAT_ID' },
      }),
    ]);

    if (!botTokenSetting || !chatIdSetting) {
      return NextResponse.json(
        { message: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
    verificationCodes.cleanup();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    verificationCodes.set(decoded.login as string, {
      code: verificationCode,
      timestamp: Date.now()
    });
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–¥—ã
    console.log('–í—Å–µ –∫–æ–¥—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', verificationCodes.getAllCodes());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram
    const telegramMessage = `üîê *–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞*
    
*Bugu Store Admin Panel*

–í–∞—à –∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:

\`${verificationCode}\`

üìã *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è*

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: *5 –º–∏–Ω—É—Ç*
üîí –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

‚ö†Ô∏è *–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã*, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`;
    
    const telegramResponse = await fetch(`https://api.telegram.org/bot${botTokenSetting.value}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatIdSetting.value,
        text: telegramMessage,
        parse_mode: 'Markdown'
      }),
    });

    if (!telegramResponse.ok) {
      const telegramError = await telegramResponse.json();
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', telegramError);
      return NextResponse.json(
        { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤ Telegram' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', error);
    return NextResponse.json(
      { message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export { verificationCodes };